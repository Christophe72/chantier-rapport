# Gestionnaire Git propre sans messages de debug
# filepath: git-clean.ps1

# Supprimer tous les messages de debug
$ErrorActionPreference = 'SilentlyContinue'
$VerbosePreference = 'SilentlyContinue'
$DebugPreference = 'SilentlyContinue'
$ProgressPreference = 'SilentlyContinue'

function Show-Menu {
    Clear-Host
    Write-Host "===========================================" -ForegroundColor Cyan
    Write-Host "    üöÄ GESTIONNAIRE GIT - IoT DASHBOARD" -ForegroundColor Cyan
    Write-Host "===========================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "[1] üì§ Push rapide (add + commit + push)" -ForegroundColor White
    Write-Host "[2] üìä Voir le statut Git" -ForegroundColor White
    Write-Host "[3] üìú Voir l'historique des commits" -ForegroundColor White
    Write-Host "[4] üì• Pull depuis GitHub" -ForegroundColor White
    Write-Host "[5] üåø Changer de branche" -ForegroundColor White
    Write-Host "[6] üóÑÔ∏è Lancer Prisma Studio" -ForegroundColor White
    Write-Host "[7] üöÄ D√©marrer le serveur dev" -ForegroundColor White
    Write-Host "[8] üßπ Nettoyer le projet" -ForegroundColor White
    Write-Host "[9] üö™ Quitter" -ForegroundColor White
    Write-Host ""
}

function Push-ToGitHub {
    Write-Host "üì§ Push vers GitHub..." -ForegroundColor Yellow
    Write-Host ""
    
    # V√©rifier le statut
    $status = git status --porcelain 2>$null
    if ([string]::IsNullOrWhiteSpace($status)) {
        Write-Host "‚ÑπÔ∏è  Aucune modification d√©tect√©e." -ForegroundColor Blue
        return
    }
    
    # Afficher les modifications
    Write-Host "üìã Modifications d√©tect√©es:" -ForegroundColor Cyan
    git status --short 2>$null
    Write-Host ""
    
    $message = Read-Host "üí¨ Message de commit (Entr√©e pour message auto)"
    if ([string]::IsNullOrWhiteSpace($message)) {
        $date = Get-Date -Format "dd/MM/yyyy HH:mm"
        $message = "Mise √† jour du $date"
    }
    
    Write-Host "‚ûï Ajout des fichiers..." -ForegroundColor Yellow
    git add . 2>$null
    
    Write-Host "üíæ Cr√©ation du commit..." -ForegroundColor Yellow
    git commit -m "$message" 2>$null
    
    Write-Host "üöÄ Push vers GitHub..." -ForegroundColor Yellow
    $branch = git branch --show-current 2>$null
    git push origin $branch 2>$null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host ""
        Write-Host "‚úÖ ================================" -ForegroundColor Green
        Write-Host "    SUCC√àS! üéâ" -ForegroundColor Green
        Write-Host "================================" -ForegroundColor Green
        Write-Host "üì§ Code pouss√© vers GitHub" -ForegroundColor White
        Write-Host "üåê https://github.com/Christophe72/chantier-rapport" -ForegroundColor White
        Write-Host "üåø Branche: $branch" -ForegroundColor White
        Write-Host "üí¨ Message: $message" -ForegroundColor White
    } else {
        Write-Host ""
        Write-Host "‚ùå ================================" -ForegroundColor Red
        Write-Host "    ERREUR lors du push" -ForegroundColor Red
        Write-Host "================================" -ForegroundColor Red
        Write-Host "üîç Solutions possibles:" -ForegroundColor Yellow
        Write-Host "  ‚Ä¢ V√©rifiez votre connexion internet" -ForegroundColor White
        Write-Host "  ‚Ä¢ Utilisez l'option [4] pour pull d'abord" -ForegroundColor White
        Write-Host "  ‚Ä¢ V√©rifiez vos identifiants GitHub" -ForegroundColor White
    }
}

function Show-GitStatus {
    Write-Host "üìä Statut Git:" -ForegroundColor Yellow
    Write-Host ""
    git status 2>$null
    Write-Host ""
    Write-Host "üìã R√©sum√©:" -ForegroundColor Cyan
    git status --short 2>$null
}

function Show-GitHistory {
    Write-Host "üìú Historique des commits:" -ForegroundColor Yellow
    Write-Host ""
    git log --oneline -10 2>$null
    Write-Host ""
    Write-Host "(Affichage des 10 derniers commits)" -ForegroundColor Gray
}

function Pull-FromGitHub {
    Write-Host "üì• Pull depuis GitHub..." -ForegroundColor Yellow
    $branch = git branch --show-current 2>$null
    Write-Host "üì• R√©cup√©ration depuis GitHub (branche: $branch)..." -ForegroundColor Cyan
    
    git pull origin $branch 2>$null
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Pull r√©ussi!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors du pull!" -ForegroundColor Red
    }
}

function Change-Branch {
    Write-Host "üåø Changer de branche:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Branches disponibles:" -ForegroundColor Cyan
    git branch -a 2>$null
    Write-Host ""
    
    $branch = Read-Host "Nom de la branche (ou 'retour' pour annuler)"
    if ($branch -eq "retour") { return }
    
    git checkout $branch 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Changement vers la branche '$branch' r√©ussi!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors du changement de branche!" -ForegroundColor Red
    }
}

function Start-PrismaStudio {
    Write-Host "üóÑÔ∏è Lancement de Prisma Studio..." -ForegroundColor Yellow
    Write-Host "Prisma Studio sera accessible sur http://localhost:5555" -ForegroundColor Cyan
    Write-Host "Appuyez sur Ctrl+C pour arr√™ter" -ForegroundColor Gray
    Write-Host ""
    npx prisma studio
}

function Start-DevServer {
    Write-Host "üöÄ D√©marrage du serveur de d√©veloppement..." -ForegroundColor Yellow
    Write-Host "L'application sera accessible sur http://localhost:3000" -ForegroundColor Cyan
    Write-Host "Appuyez sur Ctrl+C pour arr√™ter" -ForegroundColor Gray
    Write-Host ""
    npm run dev
}

function Clean-Project {
    Write-Host "üßπ Nettoyage du projet..." -ForegroundColor Yellow
    
    Write-Host "üì¶ Nettoyage node_modules..." -ForegroundColor Cyan
    Remove-Item -Path "node_modules" -Recurse -Force -ErrorAction SilentlyContinue
    
    Write-Host "üóÑÔ∏è Nettoyage base de donn√©es..." -ForegroundColor Cyan
    Remove-Item -Path "dev.db*" -Force -ErrorAction SilentlyContinue
    
    Write-Host "üì¶ R√©installation des d√©pendances..." -ForegroundColor Cyan
    npm install 2>$null
    
    Write-Host "üóÑÔ∏è R√©g√©n√©ration de la base de donn√©es..." -ForegroundColor Cyan
    npx prisma generate 2>$null
    npx prisma db push 2>$null
    
    Write-Host "‚úÖ Projet nettoy√© et reconfigur√©!" -ForegroundColor Green
}

# Menu principal
do {
    Show-Menu
    $choice = Read-Host "Votre choix (1-9)"
    Write-Host ""
    
    switch ($choice) {
        "1" { Push-ToGitHub }
        "2" { Show-GitStatus }
        "3" { Show-GitHistory }
        "4" { Pull-FromGitHub }
        "5" { Change-Branch }
        "6" { Start-PrismaStudio }
        "7" { Start-DevServer }
        "8" { Clean-Project }
        "9" { 
            Write-Host "üëã Au revoir!" -ForegroundColor Green
            Write-Host "Merci d'avoir utilis√© le gestionnaire Git!" -ForegroundColor Cyan
            exit 
        }
        default { 
            Write-Host "‚ùå Choix invalide! Veuillez choisir entre 1 et 9." -ForegroundColor Red 
        }
    }
    
    if ($choice -ne "9") {
        Write-Host ""
        Read-Host "Appuyez sur Entr√©e pour continuer"
    }
} while ($choice -ne "9")
